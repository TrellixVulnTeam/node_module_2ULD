"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Rollbar = require("rollbar");
var core_2 = require("@angular/core");
exports.ROLLBAR_CONFIGURATION = new core_2.InjectionToken('Angular Rollbar Configuration Object');
var RollbarService = (function () {
    /**
     * Creates an instance of RollbarService.
     *
     * @param {RollbarConfig} options The configuration options for your Rollbar
     * account.
     *
     * @memberOf RollbarService
     */
    function RollbarService(options) {
        this.rollbar = new Rollbar(options);
    }
    /**
     * Sets Rollbar configuration options at runtime.
     *
     * @param options A partial configuration object
     */
    /**
       * Sets Rollbar configuration options at runtime.
       *
       * @param options A partial configuration object
       */
    RollbarService.prototype.configure = /**
       * Sets Rollbar configuration options at runtime.
       *
       * @param options A partial configuration object
       */
    function (options) {
        return this.rollbar.configure(options);
    };
    RollbarService.prototype.handleError = function (err) {
        this.rollbar.error(err.originalError || err);
    };
    /**
       * Logs a message to Rollbar at the default log level
       *
       * @param {String} message The content of the message
       * @param {Error} [error] An exception to pass along with the message
       * @param {Object} [data] Custom data object to log with the message
       * @param {Function} [callback] If you aren't into promises, provide a callback.
       * @returns
       *
       * @memberOf RollbarService
       */
    /**
         * Logs a message to Rollbar at the default log level
         *
         * @param {String} message The content of the message
         * @param {Error} [error] An exception to pass along with the message
         * @param {Object} [data] Custom data object to log with the message
         * @param {Function} [callback] If you aren't into promises, provide a callback.
         * @returns
         *
         * @memberOf RollbarService
         */
    RollbarService.prototype.log = /**
         * Logs a message to Rollbar at the default log level
         *
         * @param {String} message The content of the message
         * @param {Error} [error] An exception to pass along with the message
         * @param {Object} [data] Custom data object to log with the message
         * @param {Function} [callback] If you aren't into promises, provide a callback.
         * @returns
         *
         * @memberOf RollbarService
         */
    function (message, error, data, callback) {
        return this.rollbar.log(message, error, data, callback);
    };
    /**
       * Logs an info level log message to Rollbar
       *
       * @param {String} message The content of the message
       * @param {Error} [error] An exception to pass along with the message
       * @param {Object} [data] Custom data object to log with the message
       * @param {Function} [callback] If you aren't into promises, provide a callback.
       * @returns
       *
       * @memberOf RollbarService
       */
    /**
         * Logs an info level log message to Rollbar
         *
         * @param {String} message The content of the message
         * @param {Error} [error] An exception to pass along with the message
         * @param {Object} [data] Custom data object to log with the message
         * @param {Function} [callback] If you aren't into promises, provide a callback.
         * @returns
         *
         * @memberOf RollbarService
         */
    RollbarService.prototype.info = /**
         * Logs an info level log message to Rollbar
         *
         * @param {String} message The content of the message
         * @param {Error} [error] An exception to pass along with the message
         * @param {Object} [data] Custom data object to log with the message
         * @param {Function} [callback] If you aren't into promises, provide a callback.
         * @returns
         *
         * @memberOf RollbarService
         */
    function (message, error, data, callback) {
        return this.rollbar.info(message, error, data, callback);
    };
    /**
       * Logs a WARN level log message to Rollbar
       *
       * @param {String} message The content of the message
       * @param {Error} [error] An exception to pass along with the message
       * @param {Object} [data] Custom data object to log with the message
       * @param {Function} [callback] If you aren't into promises, provide a callback.
       * @returns
       *
       * @memberOf RollbarService
       */
    /**
         * Logs a WARN level log message to Rollbar
         *
         * @param {String} message The content of the message
         * @param {Error} [error] An exception to pass along with the message
         * @param {Object} [data] Custom data object to log with the message
         * @param {Function} [callback] If you aren't into promises, provide a callback.
         * @returns
         *
         * @memberOf RollbarService
         */
    RollbarService.prototype.warn = /**
         * Logs a WARN level log message to Rollbar
         *
         * @param {String} message The content of the message
         * @param {Error} [error] An exception to pass along with the message
         * @param {Object} [data] Custom data object to log with the message
         * @param {Function} [callback] If you aren't into promises, provide a callback.
         * @returns
         *
         * @memberOf RollbarService
         */
    function (message, error, data, callback) {
        return this.rollbar.warn(message, error, data, callback);
    };
    /**
       * Logs an ERROR level log message to Rollbar
       *
       * @param {String} message The content of the message
       * @param {Error} [error] An exception to pass along with the message
       * @param {Object} [data] Custom data object to log with the message
       * @param {Function} [callback] If you aren't into promises, provide a callback.
       * @returns
       *
       * @memberOf RollbarService
       */
    /**
         * Logs an ERROR level log message to Rollbar
         *
         * @param {String} message The content of the message
         * @param {Error} [error] An exception to pass along with the message
         * @param {Object} [data] Custom data object to log with the message
         * @param {Function} [callback] If you aren't into promises, provide a callback.
         * @returns
         *
         * @memberOf RollbarService
         */
    RollbarService.prototype.error = /**
         * Logs an ERROR level log message to Rollbar
         *
         * @param {String} message The content of the message
         * @param {Error} [error] An exception to pass along with the message
         * @param {Object} [data] Custom data object to log with the message
         * @param {Function} [callback] If you aren't into promises, provide a callback.
         * @returns
         *
         * @memberOf RollbarService
         */
    function (message, error, data, callback) {
        return this.rollbar.error(message, error, data, callback);
    };
    /**
       * Logs a CRITICAL ERROR log message to Rollbar
       *
       * @param {String} message The content of the message
       * @param {Error} [error] An exception to pass along with the message
       * @param {Object} [data] Custom data object to log with the message
       * @param {Function} [callback] If you aren't into promises, provide a callback.
       * @returns
       *
       * @memberOf RollbarService
       */
    /**
         * Logs a CRITICAL ERROR log message to Rollbar
         *
         * @param {String} message The content of the message
         * @param {Error} [error] An exception to pass along with the message
         * @param {Object} [data] Custom data object to log with the message
         * @param {Function} [callback] If you aren't into promises, provide a callback.
         * @returns
         *
         * @memberOf RollbarService
         */
    RollbarService.prototype.critical = /**
         * Logs a CRITICAL ERROR log message to Rollbar
         *
         * @param {String} message The content of the message
         * @param {Error} [error] An exception to pass along with the message
         * @param {Object} [data] Custom data object to log with the message
         * @param {Function} [callback] If you aren't into promises, provide a callback.
         * @returns
         *
         * @memberOf RollbarService
         */
    function (message, error, data, callback) {
        return this.rollbar.critical(message, error, data, callback);
    };
    RollbarService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    RollbarService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core_1.Inject, args: [exports.ROLLBAR_CONFIGURATION,] },] },
    ]; };
    return RollbarService;
}());
exports.RollbarService = RollbarService;
//# sourceMappingURL=rollbar.service.js.map