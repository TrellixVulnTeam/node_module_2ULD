import { ErrorHandler } from '@angular/core';
import * as Rollbar from 'rollbar';
import { Configuration } from 'rollbar';
import { InjectionToken } from '@angular/core';
export declare const ROLLBAR_CONFIGURATION: InjectionToken<Rollbar.Configuration>;
export declare class RollbarService implements ErrorHandler {
    private rollbar;
    /**
     * Creates an instance of RollbarService.
     *
     * @param {RollbarConfig} options The configuration options for your Rollbar
     * account.
     *
     * @memberOf RollbarService
     */
    constructor(options: Configuration);
    /**
     * Sets Rollbar configuration options at runtime.
     *
     * @param options A partial configuration object
     */
    configure(options: Configuration): any;
    handleError(err: any): void;
    /**
       * Logs a message to Rollbar at the default log level
       *
       * @param {String} message The content of the message
       * @param {Error} [error] An exception to pass along with the message
       * @param {Object} [data] Custom data object to log with the message
       * @param {Function} [callback] If you aren't into promises, provide a callback.
       * @returns
       *
       * @memberOf RollbarService
       */
    log(message: String, error?: Error, data?: Object, callback?: Function): Promise<any>;
    /**
       * Logs an info level log message to Rollbar
       *
       * @param {String} message The content of the message
       * @param {Error} [error] An exception to pass along with the message
       * @param {Object} [data] Custom data object to log with the message
       * @param {Function} [callback] If you aren't into promises, provide a callback.
       * @returns
       *
       * @memberOf RollbarService
       */
    info(message: String, error?: Error, data?: Object, callback?: Function): Promise<any>;
    /**
       * Logs a WARN level log message to Rollbar
       *
       * @param {String} message The content of the message
       * @param {Error} [error] An exception to pass along with the message
       * @param {Object} [data] Custom data object to log with the message
       * @param {Function} [callback] If you aren't into promises, provide a callback.
       * @returns
       *
       * @memberOf RollbarService
       */
    warn(message: String, error?: Error, data?: Object, callback?: Function): Promise<any>;
    /**
       * Logs an ERROR level log message to Rollbar
       *
       * @param {String} message The content of the message
       * @param {Error} [error] An exception to pass along with the message
       * @param {Object} [data] Custom data object to log with the message
       * @param {Function} [callback] If you aren't into promises, provide a callback.
       * @returns
       *
       * @memberOf RollbarService
       */
    error(message: String, error?: Error, data?: Object, callback?: Function): Promise<any>;
    /**
       * Logs a CRITICAL ERROR log message to Rollbar
       *
       * @param {String} message The content of the message
       * @param {Error} [error] An exception to pass along with the message
       * @param {Object} [data] Custom data object to log with the message
       * @param {Function} [callback] If you aren't into promises, provide a callback.
       * @returns
       *
       * @memberOf RollbarService
       */
    critical(message: String, error?: Error, data?: Object, callback?: Function): Promise<any>;
}
