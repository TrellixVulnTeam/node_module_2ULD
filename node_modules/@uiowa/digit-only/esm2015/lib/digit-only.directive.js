/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, Input } from '@angular/core';
export class DigitOnlyDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.decimalCounter = 0;
        this.navigationKeys = [
            'Backspace',
            'Delete',
            'Tab',
            'Escape',
            'Enter',
            'Home',
            'End',
            'ArrowLeft',
            'ArrowRight',
            'Clear',
            'Copy',
            'Paste'
        ];
        this.decimal = false;
        this.inputElement = el.nativeElement;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        if (this.navigationKeys.indexOf(e.key) > -1 || // Allow: navigation keys: backspace, delete, arrows etc.
            (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A
            (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C
            (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V
            (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X
            (e.key === 'a' && e.metaKey === true) || // Allow: Cmd+A (Mac)
            (e.key === 'c' && e.metaKey === true) || // Allow: Cmd+C (Mac)
            (e.key === 'v' && e.metaKey === true) || // Allow: Cmd+V (Mac)
            (e.key === 'x' && e.metaKey === true) || // Allow: Cmd+X (Mac)
            (this.decimal && e.key === '.' && this.decimalCounter < 1) // Allow: only one decimal point
        ) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if (e.key === ' ' || isNaN(Number(e.key))) {
            e.preventDefault();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyUp(e) {
        if (!this.decimal) {
            return;
        }
        else {
            this.decimalCounter = this.el.nativeElement.value.split('.').length - 1;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPaste(event) {
        event.preventDefault();
        /** @type {?} */
        const pastedInput = event.clipboardData.getData('text/plain');
        if (!this.decimal) {
            document.execCommand('insertText', false, pastedInput.replace(/[^0-9]/g, ''));
        }
        else if (this.isValidDecimal(pastedInput)) {
            document.execCommand('insertText', false, pastedInput.replace(/[^0-9.]/g, ''));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDrop(event) {
        event.preventDefault();
        /** @type {?} */
        const textData = event.dataTransfer.getData('text');
        this.inputElement.focus();
        if (!this.decimal) {
            document.execCommand('insertText', false, textData.replace(/[^0-9]/g, ''));
        }
        else if (this.isValidDecimal(textData)) {
            document.execCommand('insertText', false, textData.replace(/[^0-9.]/g, ''));
        }
    }
    /**
     * @param {?} string
     * @return {?}
     */
    isValidDecimal(string) {
        return string.split('.').length <= 2;
    }
}
DigitOnlyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[digitOnly]'
            },] }
];
/** @nocollapse */
DigitOnlyDirective.ctorParameters = () => [
    { type: ElementRef }
];
DigitOnlyDirective.propDecorators = {
    decimal: [{ type: Input }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onKeyUp: [{ type: HostListener, args: ['keyup', ['$event'],] }],
    onPaste: [{ type: HostListener, args: ['paste', ['$event'],] }],
    onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DigitOnlyDirective.prototype.decimalCounter;
    /**
     * @type {?}
     * @private
     */
    DigitOnlyDirective.prototype.navigationKeys;
    /** @type {?} */
    DigitOnlyDirective.prototype.decimal;
    /** @type {?} */
    DigitOnlyDirective.prototype.inputElement;
    /** @type {?} */
    DigitOnlyDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,