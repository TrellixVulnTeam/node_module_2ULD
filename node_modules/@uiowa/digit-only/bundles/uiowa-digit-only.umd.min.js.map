{"version":3,"sources":["ng://@uiowa/digit-only/lib/digit-only.directive.ts","ng://@uiowa/digit-only/lib/digit-only.module.ts"],"names":["DigitOnlyDirective","el","this","decimalCounter","navigationKeys","decimal","inputElement","nativeElement","prototype","onKeyDown","e","indexOf","key","ctrlKey","metaKey","isNaN","Number","preventDefault","onKeyUp","value","split","length","onPaste","event","pastedInput","clipboardData","getData","isValidDecimal","document","execCommand","replace","onDrop","textData","dataTransfer","focus","string","Directive","args","selector","ElementRef","Input","HostListener","DigitOnlyModule","NgModule","imports","declarations","exports"],"mappings":"+SAAA,IAAAA,EAAA,WAwBE,SAAAA,EAAmBC,GAAAC,KAAAD,GAAAA,EAlBXC,KAAAC,eAAiB,EACjBD,KAAAE,eAAiB,CACvB,YACA,SACA,MACA,SACA,QACA,OACA,MACA,YACA,aACA,QACA,OACA,SAEOF,KAAAG,SAAW,EAIlBH,KAAKI,aAAeL,EAAGM,cA+E3B,OA3EEP,EAAAQ,UAAAC,UADA,SACUC,GAENR,KAAKE,eAAeO,QAAQD,EAAEE,MAAQ,GAC3B,MAAVF,EAAEE,MAA6B,IAAdF,EAAEG,SACT,MAAVH,EAAEE,MAA6B,IAAdF,EAAEG,SACT,MAAVH,EAAEE,MAA6B,IAAdF,EAAEG,SACT,MAAVH,EAAEE,MAA6B,IAAdF,EAAEG,SACT,MAAVH,EAAEE,MAA6B,IAAdF,EAAEI,SACT,MAAVJ,EAAEE,MAA6B,IAAdF,EAAEI,SACT,MAAVJ,EAAEE,MAA6B,IAAdF,EAAEI,SACT,MAAVJ,EAAEE,MAA6B,IAAdF,EAAEI,SACnBZ,KAAKG,SAAqB,MAAVK,EAAEE,KAAeV,KAAKC,eAAiB,IAM5C,MAAVO,EAAEE,KAAeG,MAAMC,OAAON,EAAEE,QAClCF,EAAEO,kBAKNjB,EAAAQ,UAAAU,QADA,SACQR,GACDR,KAAKG,UAGRH,KAAKC,eAAiBD,KAAKD,GAAGM,cAAcY,MAAMC,MAAM,KAAKC,OAAS,IAK1ErB,EAAAQ,UAAAc,QADA,SACQC,GACNA,EAAMN,qBACAO,EAAsBD,EAAME,cAAcC,QAAQ,cAEnDxB,KAAKG,QAMCH,KAAKyB,eAAeH,IAC7BI,SAASC,YACP,cACA,EACAL,EAAYM,QAAQ,WAAY,KATlCF,SAASC,YACP,cACA,EACAL,EAAYM,QAAQ,UAAW,MAYrC9B,EAAAQ,UAAAuB,OADA,SACOR,GACLA,EAAMN,qBACAe,EAAWT,EAAMU,aAAaP,QAAQ,QAC5CxB,KAAKI,aAAa4B,QAEbhC,KAAKG,QAMCH,KAAKyB,eAAeK,IAC7BJ,SAASC,YACP,cACA,EACAG,EAASF,QAAQ,WAAY,KAT/BF,SAASC,YACP,cACA,EACAG,EAASF,QAAQ,UAAW,MAWlC9B,EAAAQ,UAAAmB,eAAA,SAAeQ,GACb,OAAOA,EAAOf,MAAM,KAAKC,QAAU,uBApGtCe,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,2DAHQC,EAAAA,+CAqBjBC,EAAAA,yBAOAC,EAAAA,aAAYJ,KAAA,CAAC,UAAW,CAAC,4BAuBzBI,EAAAA,aAAYJ,KAAA,CAAC,QAAS,CAAC,4BASvBI,EAAAA,aAAYJ,KAAA,CAAC,QAAS,CAAC,2BAoBvBI,EAAAA,aAAYJ,KAAA,CAAC,OAAQ,CAAC,cAwBzBrC,EAxGA,GCAA0C,EAAA,WAGA,SAAAA,KAK8B,2BAL7BC,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,GACTC,aAAc,CAAC7C,GACf8C,QAAS,CAAC9C,OAEkB0C,EAR9B","sourcesContent":["import { Directive, ElementRef, HostListener, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[digitOnly]'\r\n})\r\nexport class DigitOnlyDirective {\r\n  private decimalCounter = 0;\r\n  private navigationKeys = [\r\n    'Backspace',\r\n    'Delete',\r\n    'Tab',\r\n    'Escape',\r\n    'Enter',\r\n    'Home',\r\n    'End',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'Clear',\r\n    'Copy',\r\n    'Paste'\r\n  ];\r\n  @Input() decimal? = false;\r\n  inputElement: HTMLElement;\r\n\r\n  constructor(public el: ElementRef) {\r\n    this.inputElement = el.nativeElement;\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(e: KeyboardEvent) {\r\n    if (\r\n      this.navigationKeys.indexOf(e.key) > -1 || // Allow: navigation keys: backspace, delete, arrows etc.\r\n      (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A\r\n      (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C\r\n      (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V\r\n      (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X\r\n      (e.key === 'a' && e.metaKey === true) || // Allow: Cmd+A (Mac)\r\n      (e.key === 'c' && e.metaKey === true) || // Allow: Cmd+C (Mac)\r\n      (e.key === 'v' && e.metaKey === true) || // Allow: Cmd+V (Mac)\r\n      (e.key === 'x' && e.metaKey === true) || // Allow: Cmd+X (Mac)\r\n      (this.decimal && e.key === '.' && this.decimalCounter < 1) // Allow: only one decimal point\r\n    ) {\r\n      // let it happen, don't do anything\r\n      return;\r\n    }\r\n    // Ensure that it is a number and stop the keypress\r\n    if (e.key === ' ' || isNaN(Number(e.key))) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  @HostListener('keyup', ['$event'])\r\n  onKeyUp(e: KeyboardEvent) {\r\n    if (!this.decimal) {\r\n      return;\r\n    } else {\r\n      this.decimalCounter = this.el.nativeElement.value.split('.').length - 1;\r\n    }\r\n  }\r\n\r\n  @HostListener('paste', ['$event'])\r\n  onPaste(event: ClipboardEvent) {\r\n    event.preventDefault();\r\n    const pastedInput: string = event.clipboardData.getData('text/plain');\r\n\r\n    if (!this.decimal) {\r\n      document.execCommand(\r\n        'insertText',\r\n        false,\r\n        pastedInput.replace(/[^0-9]/g, '')\r\n      );\r\n    } else if (this.isValidDecimal(pastedInput)) {\r\n      document.execCommand(\r\n        'insertText',\r\n        false,\r\n        pastedInput.replace(/[^0-9.]/g, '')\r\n      );\r\n    }\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    const textData = event.dataTransfer.getData('text');\r\n    this.inputElement.focus();\r\n\r\n    if (!this.decimal) {\r\n      document.execCommand(\r\n        'insertText',\r\n        false,\r\n        textData.replace(/[^0-9]/g, '')\r\n      );\r\n    } else if (this.isValidDecimal(textData)) {\r\n      document.execCommand(\r\n        'insertText',\r\n        false,\r\n        textData.replace(/[^0-9.]/g, '')\r\n      );\r\n    }\r\n  }\r\n\r\n  isValidDecimal(string: string): boolean {\r\n    return string.split('.').length <= 2;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DigitOnlyDirective } from './digit-only.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [DigitOnlyDirective],\r\n  exports: [DigitOnlyDirective]\r\n})\r\nexport class DigitOnlyModule {}\r\n"]}